name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: false

  push:
    tags:
      - '*.*.*'

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0 # Fetch all history so that we can checkout the tag
        ref: ${{ github.ref }} # Checkout the specific tag

    - name: Set up Git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'

    - name: Extract version from tag or input
      id: extract_version
      run: |
        VERSION=${{ github.event.inputs.version || github.ref_name }}
        if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+)?$ ]]; then
          echo "Version does not contain a valid semantic version. Exiting."
          exit 1
        fi
        MAIN_VERSION=$(echo "$VERSION" | sed -E 's/-rc[0-9]+$//')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "main_version=$MAIN_VERSION" >> $GITHUB_OUTPUT
        echo "ARTIFACT_DIR=release_artifacts" >> $GITHUB_ENV

    - name: Check if tag is on main branch
      id: check_branch
      run: |
        BRANCH=$(git branch -r --contains $GITHUB_SHA | grep -w "origin/main" || true)
        if [ -z "$BRANCH" ]; then
          echo "is_main=false" >> $GITHUB_OUTPUT
        else
          echo "is_main=true" >> $GITHUB_OUTPUT
        fi

    - name: Determine if prerelease
      id: determine_prerelease
      run: |
        if [[ "${{ steps.extract_version.outputs.version }}" =~ -rc[0-9]*$ ]]; then
          echo "prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "prerelease=${{ steps.check_branch.outputs.is_main == 'false' }}" >> $GITHUB_OUTPUT
        fi

    - name: Install AzCopy
      run: |
        curl -sL https://aka.ms/downloadazcopy-v10-linux | tar -xz
        sudo mv ./azcopy_linux_amd64_*/azcopy /usr/local/bin/

    - name: Download artifacts from Azure Blob Storage
      run: |
        mkdir -p "$ARTIFACT_DIR"
        azcopy copy '${{ secrets.CLI_BLOB_DL_SAS_URL }}/${{ steps.extract_version.outputs.main_version }}' "$ARTIFACT_DIR" --recursive

    - name: Rename downloaded artifacts
      run: |
        version="${{ steps.extract_version.outputs.main_version }}"
        dir="${{ env.ARTIFACT_DIR }}/${{ steps.extract_version.outputs.main_version }}"
        plain_version="${version#v}"  # strip 'v' prefix if present

        for file in "$dir"/*; do
          base="$(basename "$file")"
          new_name="${base/-cli-/}"
          new_name="${new_name/-$plain_version/}"
          mv "$file" "$dir/$new_name"
        done

    - name: Append the hashes to the releasenotes
      run: |
        # Append the file hash for each file except for the sha256 files
        filespath="${{ env.ARTIFACT_DIR }}/${{ steps.extract_version.outputs.main_version }}"
        release_notes="ipm-releases/${{ steps.extract_version.outputs.main_version }}/releasenotes.md"
        echo "" >> "$release_notes"
        echo "----------------------" >> "$release_notes"
        echo "" >> "$release_notes"

        for file in "$filespath"/* ; do
            if [[ "$(basename "$file")" != *.sha256 && "$(basename "$file")" != *.md ]]; then
                file_hash=$(sha256sum "$file" | awk '{ print $1 }')
                echo "* $(basename "$file")" >> "$release_notes"
                echo "    * $file_hash" >> "$release_notes"
            fi
        done

    - name: Authenticate with GitHub App
      id: auth
      uses: tibdex/github-app-token@v1
      with:
        app_id: ${{ secrets.APP_ID }}
        private_key: ${{ secrets.PRIVATE_KEY }}

    - name: Upload Release Assets
      if: false
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.extract_version.outputs.version }}
        name: ${{ steps.extract_version.outputs.version }}
        prerelease: ${{ steps.determine_prerelease.outputs.prerelease }}
        body_path: ipm-releases/${{ steps.extract_version.outputs.main_version }}/releasenotes.md
        files: ${{ env.ARTIFACT_DIR }}/${{ steps.extract_version.outputs.main_version }}/*
      env:
        GITHUB_TOKEN: ${{ steps.auth.outputs.token }}
